// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String
  activate        Boolean   @default(false)
  ban             Boolean   @default(false)
  reqIp           String
  dataLogin       DateTime  @default(now())
  googleId        String?
  datePing        DateTime  @default(now())
  vkontakteId     String?
  phoneNumber     String
  role            Role      @default(user)
  questionnaireId Questionnaire?
  tokenId         Token?
  iin             String
  avatar          String?
  taskIds         String[] @db.ObjectId
  task            Task[]   @relation(fields: [taskIds], references: [id])
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date_start  DateTime @default(now())
  date_end    DateTime @default(now())
  fileId      File[]
  imageId     Image[]
  userIds     String[] @db.ObjectId
  user        User[]   @relation(fields: [userIds], references: [id])
}

model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  link   String
  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id])
}

model File {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  link   String
  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id])
}

model Questionnaire {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  birthDay     String
  cityId       City[]
  street       String
  flat         String
  universityId University?
  collegeId    College?
  schoolId     School?
  work         String
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
}

model Token {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
}

model University {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  questionnaireId String        @unique @db.ObjectId
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
}

model College {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  questionnaireId String        @unique @db.ObjectId
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
}

model School {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  questionnaireId String        @unique @db.ObjectId
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
}

model City {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  microdistricts  Microdictrict[]
  questionnaireId String           @db.ObjectId
  questionnaire   Questionnaire    @relation(fields: [questionnaireId], references: [id])
}

model Microdictrict {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  cityId String @db.ObjectId
  city   City   @relation(fields: [cityId], references: [id])
}

enum Role {
  user
  admin
}
